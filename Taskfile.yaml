version: '3'

vars:
  NAMESPACE: vault-stack
  RELEASE_NAME: vault-stack
  CHART_PATH: ./helm-chart/vault-stack
  VAULT_POD: vault-stack-0

tasks:
  # Main deployment command (Terraform)
  up:
    desc: Deploy the entire Vault stack using Terraform
    deps:
      - pre-deploy-checks
    cmds:
      - ./scripts/10_deploy_infra.sh

  # Initialise Vault
  init:
    desc: Initialise Vault
    cmds:
      - NAMESPACE={{.NAMESPACE}} VAULT_POD={{.VAULT_POD}} ./scripts/30_vault_init.sh

  # Unseal Vault
  unseal:
    desc: Unseal Vault and set up port forwarding
    cmds:
      - NAMESPACE={{.NAMESPACE}} VAULT_POD={{.VAULT_POD}} ./scripts/40_vault_unseal.sh
      - NAMESPACE={{.NAMESPACE}} ./scripts/20_port_forwarding.sh

  # Configure Vault audit logging and Fleet integration
  audit:
    desc: Configure Vault audit logging and Fleet integration with ELK
    cmds:
      - NAMESPACE={{.NAMESPACE}} VAULT_POD={{.VAULT_POD}} ./scripts/50_vault_configure_audit.sh

  # Create sample data in Vault
  sample-data:
    desc: Create sample data in Vault (secrets, auth methods, policies)
    aliases: [data]
    cmds:
      - NAMESPACE={{.NAMESPACE}} VAULT_POD={{.VAULT_POD}} ./scripts/60_vault_sample_data.sh

  # VSO: Set up Vault Secrets Operator demo
  vso:
    desc: Deploy and configure Vault Secrets Operator (run after init & unseal)
    cmds:
      - NAMESPACE={{.NAMESPACE}} ./scripts/vso/00_deploy_vso.sh

  # VSO: Access demo webapp
  vso-webapp:
    desc: Access VSO demo webapp at http://localhost:8080
    cmds:
      - echo "Opening VSO demo at http://localhost:8080"
      - echo "Press Ctrl+C to stop"
      - kubectl port-forward -n {{.NAMESPACE}} svc/webapp-service 8080:80

  # VSO: Update secrets to test synchronisation
  vso-update:
    desc: Update secrets in Vault to test VSO sync
    cmds:
      - |
        echo "Updating secrets in Vault..."
        kubectl exec -n {{.NAMESPACE}} {{.VAULT_POD}} -- vault kv put kvv2/webapp/config \
          username="user-$(date +%s)" \
          password="pass-$(date +%s)"
        echo "Secret updated! VSO will sync within 30 seconds."
        echo "Refresh http://localhost:8080 to see changes"

  # ELK Dynamic Credentials Namespace
  elk:
    desc: ELK dynamic credentials - Show available commands
    cmds:
      - task --list | grep "elk:"

  elk:dynamic:
    desc: Deploy Elasticsearch dynamic credentials demo (run after init & unseal)
    aliases: [dynamic]
    cmds:
      - NAMESPACE={{.NAMESPACE}} ./scripts/elk/20_dynamic_secrets.sh

  elk:webapp:
    desc: Access demo webapp at http://localhost:8090
    aliases: [web]
    cmds:
      - echo "Opening Elasticsearch dynamic credentials demo at http://localhost:8090"
      - echo "Lease renewed every 60s | Credentials rotate every 5 minutes"
      - echo "Press Ctrl+C to stop"
      - kubectl port-forward -n {{.NAMESPACE}} svc/elk-dynamic-webapp-service 8090:80

  elk:rotate:
    desc: Force credential rotation by restarting the demo pod
    aliases: [rotate]
    cmds:
      - |
        echo "Forcing credential rotation..."
        kubectl delete pod -n {{.NAMESPACE}} -l app=elk-dynamic-webapp
        echo "Pod restarting with new dynamic credentials..."
        echo "Wait a few seconds then check http://localhost:8090"

  elk:creds:
    desc: View current dynamic Elasticsearch credentials
    aliases: [view]
    cmds:
      - |
        echo "Current dynamic Elasticsearch credentials:"
        kubectl get secret elasticsearch-dynamic-secret -n {{.NAMESPACE}} -o jsonpath='{.data.username}' | base64 -d && echo
        echo "Password: [hidden - check Kubernetes secret]"

  # Clean/destroy everything (Terraform)
  clean:
    desc: Destroy the entire stack
    aliases: [rm]
    cmds:
      - NAMESPACE={{.NAMESPACE}} ./scripts/tools/destroy.sh

  # Show status of all components
  status:
    desc: Show status of all components
    cmds:
      - NAMESPACE={{.NAMESPACE}} VAULT_POD={{.VAULT_POD}} ./scripts/tools/status.sh

  # Access info
  info:
    desc: Show access information and credentials
    cmds:
      - ./scripts/tools/info.sh

  # Logs for a service
  logs:
    desc: View logs for a service
    cmds:
      - NAMESPACE={{.NAMESPACE}} ./scripts/tools/logs.sh {{.CLI_ARGS}}

  # Internal: Pre-deployment checks
  pre-deploy-checks:
    desc: "[Internal] Check if required tools are installed"
    cmds:
      - ./scripts/tools/pre-deploy-checks.sh

  # Help - show available commands
  default:
    desc: Show available commands
    cmds:
      - task --list
    silent: true