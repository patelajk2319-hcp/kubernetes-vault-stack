version: '3'

vars:
  NAMESPACE: vault-stack
  RELEASE_NAME: vault-stack
  CHART_PATH: ./helm-chart/vault-stack
  VAULT_POD: vault-stack-0

tasks:
  # Main deployment command (Terraform)
  up:
    desc: Deploy the entire Vault stack using Terraform
    deps:
      - pre-deploy-checks
    cmds:
      - ./scripts/10_deploy_infra.sh

  # Initialise Vault
  init:
    desc: Initialise Vault
    cmds:
      - NAMESPACE={{.NAMESPACE}} VAULT_POD={{.VAULT_POD}} ./scripts/30_vault_init.sh

  # Unseal Vault
  unseal:
    desc: Unseal Vault and set up port forwarding
    cmds:
      - NAMESPACE={{.NAMESPACE}} VAULT_POD={{.VAULT_POD}} ./scripts/40_vault_unseal.sh
      - NAMESPACE={{.NAMESPACE}} ./scripts/20_port_forwarding.sh

  # Configure Vault audit logging and Fleet integration
  audit:
    desc: Configure Vault audit logging and Fleet integration with ELK
    cmds:
      - NAMESPACE={{.NAMESPACE}} VAULT_POD={{.VAULT_POD}} ./scripts/50_vault_configure_audit.sh

  # Create sample data in Vault
  sample-data:
    desc: Create sample data in Vault (secrets, auth methods, policies)
    aliases: [data]
    cmds:
      - NAMESPACE={{.NAMESPACE}} VAULT_POD={{.VAULT_POD}} ./scripts/60_vault_sample_data.sh

  # VSO Demo: Configure Vault for VSO
  vso-configure:
    desc: Configure Vault for Vault Secrets Operator (Terraform)
    cmds:
      - cd terraform && terraform apply -target=module.vault_vso_config -auto-approve

  # VSO Demo: Deploy VSO custom resources
  vso-deploy:
    desc: Deploy VSO custom resources and demo application
    cmds:
      - kubectl apply -f k8s/vso-demo/ -n {{.NAMESPACE}}

  # VSO Demo: Check VSO status
  vso-status:
    desc: Check status of VSO resources
    cmds:
      - echo "=== VaultConnection Status ==="
      - kubectl get vaultconnection -n {{.NAMESPACE}}
      - echo ""
      - echo "=== VaultAuth Status ==="
      - kubectl get vaultauth -n {{.NAMESPACE}}
      - echo ""
      - echo "=== VaultStaticSecret Status ==="
      - kubectl get vaultstaticsecret -n {{.NAMESPACE}}
      - echo ""
      - echo "=== Synced Kubernetes Secrets ==="
      - kubectl get secrets -n {{.NAMESPACE}} | grep -E "webapp-secret|database-secret" || true
      - echo ""
      - echo "=== Demo Application Status ==="
      - kubectl get deployment webapp-deployment -n {{.NAMESPACE}}
      - kubectl get pods -l app=webapp -n {{.NAMESPACE}}

  # VSO Demo: Access webapp
  vso-webapp:
    desc: Port-forward to access VSO demo webapp
    cmds:
      - echo "Accessing VSO demo webapp at http://localhost:8080"
      - echo "Press Ctrl+C to stop port-forwarding"
      - kubectl port-forward -n {{.NAMESPACE}} svc/webapp-service 8080:80

  # VSO Demo: Update secrets in Vault
  vso-update:
    desc: Update secrets in Vault (to test VSO synchronisation)
    cmds:
      - |
        echo "Updating webapp secret in Vault..."
        kubectl exec -n {{.NAMESPACE}} {{.VAULT_POD}} -- vault kv put kvv2/webapp/config \
          username="updated-user-$(date +%s)" \
          password="updated-pass-$(date +%s)"
        echo ""
        echo "Secret updated! VSO will sync within 30 seconds."
        echo "Run 'task vso-webapp' and refresh the page to see changes."

  # VSO Demo: Cleanup
  vso-clean:
    desc: Remove VSO demo resources
    cmds:
      - kubectl delete -f k8s/vso-demo/ -n {{.NAMESPACE}} --ignore-not-found=true

  # VSO Demo: Full workflow
  vso-demo:
    desc: Run complete VSO demo (configure Vault, deploy resources, show status)
    cmds:
      - task: vso-configure
      - sleep 5
      - task: vso-deploy
      - sleep 10
      - task: vso-status
      - echo ""
      - echo "âœ… VSO Demo deployed successfully!"
      - echo ""
      - echo "Next steps:"
      - echo "  1. Run 'task vso-webapp' to access the demo application"
      - echo "  2. Run 'task vso-update' to update secrets and watch them sync"
      - echo "  3. Run 'task vso-status' to check synchronisation status"

  # Clean/destroy everything (Terraform)
  clean:
    desc: Destroy the entire stack
    aliases: [rm]
    cmds:
      - NAMESPACE={{.NAMESPACE}} ./scripts/tools/destroy.sh

  # Show status of all components
  status:
    desc: Show status of all components
    cmds:
      - NAMESPACE={{.NAMESPACE}} VAULT_POD={{.VAULT_POD}} ./scripts/tools/status.sh

  # Access info
  info:
    desc: Show access information and credentials
    cmds:
      - ./scripts/tools/info.sh

  # Logs for a service
  logs:
    desc: View logs for a service
    cmds:
      - NAMESPACE={{.NAMESPACE}} ./scripts/tools/logs.sh {{.CLI_ARGS}}

  # Internal: Pre-deployment checks
  pre-deploy-checks:
    desc: "[Internal] Check if required tools are installed"
    cmds:
      - ./scripts/tools/pre-deploy-checks.sh

  # Help - show available commands
  default:
    desc: Show available commands
    cmds:
      - task --list
    silent: true